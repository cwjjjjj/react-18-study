import * as THREE from "three";
import { Canvas, useFrame, useLoader, useThree } from "@react-three/fiber";
import { OrbitControls, Stage, Stats, useGLTF } from "@react-three/drei";
// @ts-ignore
import shoeGltf from "../assets/shoe.gltf";
import houseGltf from "../assets/LittlestTokyo.gltf";
import { GLTFLoader } from "three/examples/jsm/loaders/GLTFLoader";
import squareGltf from "../assets/square.gltf";
import { House2 } from "@/assets/LittlestTokyo";
import { useState, useRef } from "react";
import { useSpring, animated } from "@react-spring/three";
import ferrariGltf from "../assets/ferrari.glb";
import { easings } from "react-spring";

function Ball({ ...props }) {
  const a = useThree();
  const [isBig, setIsBig] = useState(false);
  return (
    <>
      <mesh
        position={[-10, 10, 0]}
        {...props}
        scale={isBig ? 2 : 1}
        onClick={() => {
          setIsBig(!isBig);
          console.log("11");
        }}
      >
        <sphereGeometry />
        <meshStandardMaterial color="hotpink" />
      </mesh>
    </>
  );
}

/* This file was initially auto-generated by https://github.com/pmndrs/gltfjsx and then adapted manually */

function Ferrari(props: any) {
  const { nodes, materials }: any = useGLTF(ferrariGltf);
  const [isBig, setIsBig] = useState(false);
  const { rotation } = useSpring({
    from: {
      rotation: [0, 0, 0],
    },
    to: {
      rotation: [2 * Math.PI, 0, 0],
    },
    config: {
      duration: 600,
    },
    loop: { reset: true },
  });
  const { scale } = useSpring({
    scale: isBig ? 2 : 1,
  });
  console.log({ rotation });
  useFrame(({ clock }) => {
    // testRef.current.rotation = [-Math.PI / 1, 0, 0];
    const a = clock.getElapsedTime();
    // testRef.current.rotation.x = a;
  });
  // console.log("spring", spring);

  return (
    <animated.group
      {...props}
      dispose={null}
      scale={scale}
      onClick={() => {
        setIsBig(!isBig);
      }}
    >
      <group position={[0, 0.68, 0]} rotation={[-Math.PI / 2, 0, -Math.PI / 2]}>
        <mesh
          geometry={nodes.trim.geometry}
          material={materials.Leather_red}
          position={[-0.38, 0, -0.02]}
        />
        <mesh
          geometry={nodes.lights_red.geometry}
          material={materials.Taillight_Glass}
          position={[0.91, 0, -0.01]}
        />
        <mesh
          geometry={nodes.plastic_gray.geometry}
          material={materials.plastic_gray}
          position={[0.11, 0, -0.03]}
        />
        <mesh
          geometry={nodes.metal.geometry}
          material={materials.metal_gray}
          position={[0.22, 0, 0]}
        />
        <mesh
          geometry={nodes.lights.geometry}
          material={materials.Projector_Glass}
          position={[-1.85, 0, -0.07]}
        />
        <mesh
          geometry={nodes.leds.geometry}
          material={materials.Turn_Signal_LED}
          position={[-1.27, 0, 0.02]}
        />
        <mesh
          geometry={nodes.leather.geometry}
          material={materials.Leather}
          position={[-0.35, 0, -0.03]}
        />
        <mesh
          geometry={nodes.interior_light.geometry}
          material={materials.Interior_dark}
          position={[0, 0, 0]}
        />
        <mesh
          geometry={nodes.grills.geometry}
          material={materials.Tires}
          position={[0.05, -0.01, -0.03]}
        />
        <mesh
          geometry={nodes.glass.geometry}
          material={materials.Glass_Gray}
          position={[0, 0, 0.19]}
        />
        <mesh
          geometry={nodes.chrome.geometry}
          material={materials.metal_chrome}
          position={[0.03, 0, 0.01]}
        />
        <mesh
          geometry={nodes.carpet.geometry}
          material={materials.Carpet}
          position={[-0.28, 0, -0.23]}
        />
        <mesh
          geometry={nodes.carbon_fibre_trim.geometry}
          material={materials.Carbon_Fiber}
          position={[-0.18, 0, -0.04]}
        />
        <mesh
          geometry={nodes.carbon_fibre.geometry}
          material={materials.Carbon_Fiber}
          position={[-0.44, -0.35, 0.12]}
        />
        <mesh
          geometry={nodes.brakes.geometry}
          material={materials.Taillight_Glass}
          position={[1.99, 0, 0.2]}
        />
        <mesh
          geometry={nodes.interior_dark.geometry}
          material={materials.Interior_light}
          position={[0, 0, 0.01]}
        />
        <mesh
          geometry={nodes.body.geometry}
          material={materials.Body_Color}
          position={[-0.01, 0, 0.02]}
        />
        <mesh
          geometry={nodes.blue.geometry}
          material={materials._0098_DodgerBlue}
          position={[-0.35, -0.44, 0.07]}
        />
        <mesh
          geometry={nodes.wipers.geometry}
          material={materials.Tires}
          position={[-1.09, 0.01, 0.11]}
        />
        <mesh
          geometry={nodes.yellow_trim.geometry}
          material={materials.Ferrari_Yellow}
          position={[-1.4, 0, 0.05]}
        />
      </group>
      <animated.group position={[0.82, 0.36, 1.5]} rotation={rotation}>
        <mesh geometry={nodes.wheel.geometry} material={materials.metal_gray} />
        <mesh
          geometry={nodes.tire.geometry}
          material={materials.Tires}
          position={[-0.01, 0, 0]}
        />
        <mesh
          geometry={nodes.rim_rr.geometry}
          material={materials.metal_gray}
          position={[0.13, 0, 0]}
        />
        <mesh
          geometry={nodes.centre.geometry}
          material={materials.Ferrari_Yellow}
          position={[0.11, 0, 0]}
        />
        <mesh
          geometry={nodes.brake.geometry}
          material={materials.metal_gray}
          position={[0.01, 0, 0]}
        />
        <mesh
          geometry={nodes.nuts.geometry}
          material={materials.Interior_dark}
          position={[0.1, 0, 0.01]}
        />
      </animated.group>
      <animated.group position={[-0.82, 0.36, 1.49]} rotation={rotation}>
        <mesh
          geometry={nodes.tire_1.geometry}
          material={materials.Tires}
          position={[0.01, 0, 0]}
        />
        <mesh
          geometry={nodes.brake_1.geometry}
          material={materials.metal_gray}
          position={[-0.02, 0, 0]}
        />
        <mesh
          geometry={nodes.centre_1.geometry}
          material={materials.Ferrari_Yellow}
          position={[-0.11, 0, 0]}
        />
        <mesh
          geometry={nodes.wheel_1.geometry}
          material={materials.metal_gray}
        />
        <mesh
          geometry={nodes.rim_rl.geometry}
          material={materials.metal_gray}
          position={[-0.13, 0, 0]}
        />
        <mesh
          geometry={nodes.nuts_1.geometry}
          material={materials.Interior_dark}
          position={[-0.1, 0, 0.01]}
        />
      </animated.group>
      <animated.group position={[-0.84, 0.36, -1.16]} rotation={rotation}>
        <mesh
          geometry={nodes.rim_fl.geometry}
          material={materials.metal_gray}
          position={[-0.11, 0, 0]}
        />
        <mesh
          geometry={nodes.brake_2.geometry}
          material={materials.metal_gray}
        />
        <mesh
          geometry={nodes.centre_2.geometry}
          material={materials.Ferrari_Yellow}
          position={[-0.1, 0, 0]}
        />
        <mesh
          geometry={nodes.nuts_2.geometry}
          material={materials.Interior_dark}
          position={[-0.09, 0, 0.01]}
        />
        <mesh
          geometry={nodes.wheel_2.geometry}
          material={materials.metal_gray}
        />
        <mesh
          geometry={nodes.tire_2.geometry}
          material={materials.Tires}
          position={[0.01, 0, 0]}
        />
      </animated.group>
      <animated.group position={[0.83, 0.36, -1.15]} rotation={rotation}>
        <mesh
          geometry={nodes.brake_3.geometry}
          material={materials.metal_gray}
        />
        <mesh
          geometry={nodes.centre_3.geometry}
          material={materials.Ferrari_Yellow}
          position={[0.1, 0, 0]}
        />
        <mesh
          geometry={nodes.wheel_3.geometry}
          material={materials.metal_gray}
        />
        <mesh
          geometry={nodes.rim_fr.geometry}
          material={materials.metal_gray}
          position={[0.11, 0, 0]}
        />
        <mesh
          geometry={nodes.tire_3.geometry}
          material={materials.Tires}
          position={[-0.01, 0, 0]}
        />
        <mesh
          geometry={nodes.nuts_3.geometry}
          material={materials.Interior_dark}
          position={[0.09, 0, 0.01]}
        />
      </animated.group>
      <group position={[-0.35, 0.8, -0.35]} rotation={[-1.92, 0, 0]}>
        <mesh
          geometry={nodes.steering_carbon.geometry}
          material={materials.Carbon_Fiber}
          position={[0, 0.02, 0.01]}
          rotation={[Math.PI / 9, 0, 0]}
        />
        <mesh
          geometry={nodes.steering_centre.geometry}
          material={materials.Ferrari_Yellow}
        />
        <mesh
          geometry={nodes.steering_column.geometry}
          material={materials.Interior_dark}
          position={[0, 0.07, -0.01]}
          rotation={[Math.PI / 9, 0, 0]}
        />
        <mesh
          geometry={nodes.steering_leather.geometry}
          material={materials.Leather}
          position={[0, 0.02, 0.01]}
          rotation={[Math.PI / 9, 0, 0]}
        />
        <mesh
          geometry={nodes.steering_metal.geometry}
          material={materials.metal_gray}
          position={[0.09, 0.02, -0.07]}
          rotation={[Math.PI / 9, 0, 0]}
        />
        <mesh
          geometry={nodes.steering_red_lights.geometry}
          material={materials.Taillight_Glass}
          position={[0.01, 0.02, -0.07]}
          rotation={[Math.PI / 9, 0, 0]}
        />
        <mesh
          geometry={nodes.steering_trim.geometry}
          material={materials.Leather_red}
          position={[0, 0.02, -0.08]}
          rotation={[Math.PI / 9, 0, 0]}
        />
      </group>
    </animated.group>
  );
}

function Shoe({ color, ...props }: any) {
  const { nodes, materials }: any = useGLTF(shoeGltf);
  const [isBig, setIsBig] = useState(false);
  // The following is a read-out of the models contents, all of its
  // meshes, groups and so on.
  return (
    <group
      {...props}
      dispose={null}
      onClick={() => {
        console.log("@@");
        setIsBig(!isBig);
      }}
      scale={isBig ? 2 : 1}
    >
      {/* We can alter materials by piercing into them: materia-property={...} */}
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.shoe.geometry}
        material={materials.laces}
        material-envMapIntensity={0.8}
      />
      {/* Or, we define new materials, which now allows full re-use */}
      <mesh castShadow receiveShadow geometry={nodes.shoe_1.geometry}>
        <meshStandardMaterial
          color={color}
          aoMap={materials.mesh.aoMap}
          normalMap={materials.mesh.normalMap}
          normalMap-encoding={THREE.LinearEncoding}
          roughnessMap={materials.mesh.roughnessMap}
          metalnessMap={materials.mesh.metalnessMap}
          envMapIntensity={0.8}
        />
      </mesh>
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.shoe_2.geometry}
        material={materials.caps}
        material-envMapIntensity={0.8}
      />
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.shoe_3.geometry}
        material={materials.inner}
        material-envMapIntensity={0.8}
      />
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.shoe_4.geometry}
        material={materials.sole}
        material-envMapIntensity={0.8}
      />
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.shoe_5.geometry}
        material={materials.stripes}
        material-envMapIntensity={0.8}
      />
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.shoe_6.geometry}
        material={materials.band}
        material-envMapIntensity={0.8}
      />
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.shoe_7.geometry}
        material={materials.patch}
        material-envMapIntensity={0.8}
      />
    </group>
  );
}

function Shoe2({ ...props }) {
  const { scene }: any = useGLTF(shoeGltf);
  const [isBig, setIsBig] = useState(false);
  return (
    <>
      <primitive
        object={scene}
        {...props}
        onClick={() => {
          setIsBig(!isBig);
          console.log("shoe2");
        }}
        scale={isBig ? 2 : 1}
      />
    </>
  );
}

// gltfjsx generate
function Shoe3(props: any) {
  const [isBig, setIsBig] = useState(false);
  const { scale } = useSpring({ scale: isBig ? 2 : 1 });

  const { nodes, materials }: any = useGLTF(shoeGltf);
  return (
    <animated.group
      {...props}
      dispose={null}
      scale={scale}
      onClick={() => {
        console.log("shoe3");
        setIsBig(!isBig);
      }}
    >
      <mesh geometry={nodes.shoe.geometry} material={materials.laces} />
      <mesh geometry={nodes.shoe_1.geometry} material={materials.mesh} />
      <mesh geometry={nodes.shoe_2.geometry} material={materials.caps} />
      <mesh geometry={nodes.shoe_3.geometry} material={materials.inner} />
      <mesh geometry={nodes.shoe_4.geometry} material={materials.sole} />
      <mesh geometry={nodes.shoe_5.geometry} material={materials.stripes} />
      <mesh geometry={nodes.shoe_6.geometry} material={materials.band} />
      <mesh geometry={nodes.shoe_7.geometry} material={materials.patch} />
    </animated.group>
  );
}

function House({ ...props }) {
  const { nodes, materials, scene }: any = useGLTF(houseGltf);
  return (
    <>
      <primitive
        object={scene}
        scale={0.006}
        position={[10, -10, 0]}
        {...props}
      />
    </>
  );
}
function Square({ ...props }) {
  const { nodes, materials, scene }: any = useGLTF(squareGltf);
  const gltf = useLoader(GLTFLoader, squareGltf);

  return (
    <>
      <primitive object={scene} scale={0.4} {...props} />
    </>
  );
}
export default function R3f() {
  return (
    <Canvas
      shadows
      style={{
        height: "100vh",
        width: "100vw",
      }}
    >
      <pointLight position={[-10, 10, 1]} />
      <Ball position={[-5, 5, 1]} />
      <Stage environment="city" intensity={0.6}>
        <Shoe color="tomato" position={[10, 0, 0]} />
        <Shoe
          color="orange"
          scale={-1}
          // rotation={[0, 0.5, Math.PI]}
          position={[0, 0, -2]}
        />
      </Stage>
      <Shoe2 position={[0, 5, 1]} />
      <Shoe3 position={[2, 5, 1]} />
      <House position={[5, -5, 1]} />
      <Square position={[5, 5, 1]} />
      <House2 scale={0.006} position={[-5, -5, 1]} />
      <Ferrari positon={[0, 0, 0]} />
      <OrbitControls />
      <Stats className="fps" />
    </Canvas>
  );
}
